int buttons[] = {3, 5, 7, 9}; //The four button input pins
int leds[] = {2, 4, 6, 8}; // LED pins

int sequence[100];

int largestIndex = 0;


const int START = 0;
const int PLAY = 1;
const int GAMEOVER = 2;

int gameState;

long currentMillis = 0;
long previousMillis = 0;

void setup() {
  // put your setup code here, to run once:
 for(int pin=0; pin<4; pin++)
{
  pinMode(leds[pin], OUTPUT);
}
 for(int pin=0; pin<4; pin++)
{
  pinMode(buttons[pin], INPUT);
}


 gameState = START; // Start the game with the start.
randomSeed(analogRead(40)); // initializes the pseudo-random number generator,
}

void loop() {
  // put your main code here, to run repeatedly:
 if(gameState == START)
 {
 waitToStart();
 }
 else if(gameState == PLAY)
 {
  showSequence();
  readSequence();
 }
 else if(gameState == GAMEOVER)
 {
  Serial.println("Gameover");
  blinkAll(5);
  gameState = START;
 }
 }

 void showSequence()
{
//blinkRed(2);
 sequence[largestIndex] = random(0,4);
 largestIndex++;
 for(int index=0; index<largestIndex; index++)
 {
 delay(300);
 digitalWrite(leds[sequence[index]], HIGH);
 delay(700);
 digitalWrite(leds[sequence[index]], LOW);
 }
 }
 void readSequence()
 {
 int positionPressed;
 boolean madeMistake = false;
 for(int index=0; index<largestIndex & madeMistake == false; index++)
 {
 positionPressed = waitForButton(2000); // 0, 1, 2, or 3

 if(positionPressed == -1 | positionPressed != sequence[index])
 {
 madeMistake = true; // Exit the loop.
 gameState = GAMEOVER;
 }
 }
 }

 int waitForButton(int delay)
 {
 int buttonPressed = -1;
 int input;
 boolean buttonBackUp = false;
 currentMillis = millis(); // The number of ms since the program started running
 previousMillis = currentMillis; // Records the point when we start spinning the loop.

 while (currentMillis - previousMillis < delay & buttonBackUp == false)
{
// Read the button and record when it has been pushed down.
 for(int pin = 0; pin < 4 & buttonBackUp == false; pin++)
 {
 if(digitalRead(buttons[pin]) == HIGH)
{
 buttonPressed = pin;
 digitalWrite(leds[pin], HIGH);
 while (currentMillis - previousMillis < delay & buttonBackUp == false)
{
 input = digitalRead(buttons[pin]);
 if(input == LOW)
{
 buttonBackUp = true;
 }
 currentMillis = millis();
 }

 digitalWrite(leds[pin], LOW);

 if(currentMillis - previousMillis > delay)
 {
 buttonPressed = -1; // They took to long to let the button up so they lose.
 }
 }
 }
 currentMillis = millis();
 }
 return buttonPressed;
 }

 void waitToStart()
 {
 int buttonPressed = -1;
 allOff();
 for(int pin = 0; pin < 4; pin++)
 {
  if(buttonPressed == -1)
 {
  digitalWrite(leds[pin], HIGH);
  buttonPressed = waitForButton(800);
  digitalWrite(leds[pin], LOW);
 }
 }
 if(buttonPressed != -1)
 {
// A button was pushed so wait then start playing.
 delay(1500);
 largestIndex = 0; // Restart
 gameState = PLAY;
 }
 }
// Turns all the LEDs off.
 void allOff()
 {
 for(int pin = 0; pin < 4; pin++)
 {
 digitalWrite(leds[pin], LOW);
 }
 }
 // Turns all the LEDs on.
 void allOn()
 {
 for(int pin = 0; pin < 4; pin++)
 {
 digitalWrite(leds[pin], HIGH);
 }
 }

 void blinkAll(int times)
{
 for(int count = 0; count < times; count++)
 {
 allOn();
 delay(300);
 allOff();
 delay(300);
 }
 }
